__author__ = 'evka'

from lxml import etree
import textwrap as tw
import sys
import rw_reg

ADDRESS_TABLE_TOP = './address_table/gem_amc_top.xml'
CONSTANTS_FILE = '../common/hdl/pkg/registers.vhd'
BASH_STATUS_SCRIPT_FILE ='./ctp7_bash_scripts/generated/ctp7_status.sh'
BASH_REG_READ_SCRIPT_FILE='./ctp7_bash_scripts/generated/reg_read.sh'
UHAL_ADDRESS_TABLE_FILE_CTP7='./address_table/uhal_gem_amc_ctp7'
UHAL_ADDRESS_TABLE_FILE_GLIB='./address_table/uhal_gem_amc_glib'

TOP_NODE_NAME = 'GEM_AMC'
VHDL_REG_CONSTANT_PREFIX = 'REG_'

VHDL_REG_SIGNAL_MARKER_START = '------ Register signals begin'
VHDL_REG_SIGNAL_MARKER_END   = '------ Register signals end'

VHDL_REG_SLAVE_MARKER_START = '--==== Registers begin'
VHDL_REG_SLAVE_MARKER_END   = '--==== Registers end'

VHDL_REG_GENERATED_DISCLAIMER = '(this section is generated by <gem_amc_repo_root>/scripts/generate_registers.py -- do not edit)'

AXI_IPB_BASE_ADDRESS = 0x64000000
GLIB_IPB_BASE_ADDRESS = 0x40000000

class Module:
    name = ''
    description = ''
    baseAddress = 0x0
    regAddressMsb = None
    regAddressLsb = None
    file = ''
    userClock = ''
    busClock = ''
    busReset = ''
    masterBus = ''
    slaveBus = ''
    isExternal = False # if this is true it means that firmware doesn't have to be modified, only bash scripts will be generated

    def __init__(self):
        self.regs = []

    def addReg(self, reg):
        self.regs.append(reg)

    def isValid(self):
        if self.isExternal:
            return self.name is not None
        else:
            return self.name is not None and self.file is not None and self.userClock is not None and self.busClock is not None\
                   and self.busReset is not None and self.masterBus is not None and self.slaveBus is not None\
                   and self.regAddressMsb is not None and self.regAddressLsb is not None

    def toString(self):
        return str(self.name) + ' module: ' + str(self.description) + '\n'\
                         + '    Base address = ' + hex(self.baseAddress) + '\n'\
                         + '    Register address MSB = ' + hex(self.regAddressMsb) + '\n'\
                         + '    Register address LSB = ' + hex(self.regAddressLsb) + '\n'\
                         + '    File = ' + str(self.file) + '\n'\
                         + '    User clock = ' + str(self.userClock) + '\n'\
                         + '    Bus clock = ' + str(self.busClock) + '\n'\
                         + '    Bus reset = ' + str(self.busReset) + '\n'\
                         + '    Master_bus = ' + str(self.masterBus) + '\n'\
                         + '    Slave_bus = ' + str(self.slaveBus)

    def getVhdlName(self):
        return self.name.replace(TOP_NODE_NAME + '.', '')

class Register:
    name = ''
    address = 0x0
    description = ''
    permission = ''
    mask = 0x0
    signal = None
    write_pulse_signal = None
    write_done_signal = None
    read_pulse_signal = None
    read_ready_signal = None
    default = 0x0
    msb = -1
    lsb = -1

    def isValidReg(self, isExternal = False):
        if isExternal:
            return self.name is not None and self.address is not None and self.permission is not None\
                   and self.mask is not None
        else:
            return self.name is not None and self.address is not None and self.permission is not None\
                   and self.mask is not None \
                   and ((self.signal is not None and 'w' in self.permission) == (self.default is not None)) \
                   and (self.signal is not None or self.write_pulse_signal is not None or self.read_pulse_signal is not None)

    def toString(self):
        ret = 'Register ' + str(self.name) + ': ' + str(self.description) + '\n'\
              '    Address = ' + hex(self.address) + '\n'\
              '    Mask = ' + hexPadded32(self.mask) + '\n'\
              '    Permission = ' + str(self.permission) + '\n'\
              '    Default value = ' + hexPadded32(self.default) + '\n'\

        if self.signal is not None:
            ret += '    Signal = ' + str(self.signal) + '\n'
        if self.write_pulse_signal is not None:
            ret += '    Write pulse signal = ' + str(self.write_pulse_signal) + '\n'
        if self.write_done_signal is not None:
            ret += '    Write done signal = ' + str(self.write_done_signal) + '\n'
        if self.read_pulse_signal is not None:
            ret += '    Read pulse signal = ' + str(self.read_pulse_signal) + '\n'
        if self.read_ready_signal is not None:
            ret += '    Read ready signal = ' + str(self.read_ready_signal) + '\n'

        return ret

    def getVhdlName(self):
        return self.name.replace(TOP_NODE_NAME + '.', '').replace('.', '_')

def main():
    print('Hi, parsing this top address table file: ' + ADDRESS_TABLE_TOP)

    board_type = "ctp7"
    num_of_oh = 4
    station = "1"

    if len(sys.argv) < 2:
        print('Usage: generate_registers.py <board_type> [num_of_oh] [gem_station]')
        print('board_type can be: ctp7 or glib')
        print('num_of_oh is optional. if supplied, the script will substitute generate_size with this value when generating registers in the firmware. Note that this is not affecting the uHAL xml file generation.')
        print('gem_station: 0 for ME0, 1 for GE1/1, and 2 for GE2/1 (set to 1 by default)')
        return
    else:
        if sys.argv[1] != 'ctp7' and sys.argv[1] != 'glib':
            print('Unsupported board type. Use "ctp7" or "glib"')
        else:
            board_type = sys.argv[1]

        if len(sys.argv) > 2:
            num_of_oh = parseInt(sys.argv[2])
            print('Generating address table with num_of_oh = %d'%(num_of_oh))
        elif board_type == 'ctp7':
            num_of_oh = 4
        elif board_type == 'glib':
            num_of_oh = 2

        if (len(sys.argv) > 3):
            station = sys.argv[3]
            print('GEM station = %s' % station)

    parser = etree.XMLParser(remove_comments=True)
    tree = etree.parse(ADDRESS_TABLE_TOP, parser)
    root = tree.getroot()
    # Remove the xi:include tags
    for elem in root.findall(".//*[@fw_skip]"):
        elem.getparent().remove(elem)

    modules = []
    vars = {}

    findRegisters(root, '', 0x0, modules, None, vars, False, num_of_oh, station)

    print('Modules:')
    for module in modules:
        module.regs.sort(key=lambda reg: reg.address * 100 + reg.msb)
        print('============================================================================')
        print(module.toString())
        print('============================================================================')
        for reg in module.regs:
            print(reg.toString())

    print('Writing constants file to ' + CONSTANTS_FILE)
    writeConstantsFile(modules, CONSTANTS_FILE)

    for module in modules:
        if not module.isExternal:
            updateModuleFile(module)

    if board_type == 'ctp7':
        writeStatusBashScript(modules, BASH_STATUS_SCRIPT_FILE)
        #writeRegReadBashScript(modules, BASH_REG_READ_SCRIPT_FILE)
        writeUHalAddressTable(modules, UHAL_ADDRESS_TABLE_FILE_CTP7, 0, num_of_oh)
    elif board_type == 'glib':
        writeUHalAddressTable(modules, UHAL_ADDRESS_TABLE_FILE_GLIB, GLIB_IPB_BASE_ADDRESS, num_of_oh)

def findRegisters(node, baseName, baseAddress, modules, currentModule, vars, isGenerated, num_of_oh, station):

    if node.get('gem_stations') is not None and station not in node.get('gem_stations'):
        return

    if (isGenerated == None or isGenerated == False) and node.get('generate') is not None and node.get('generate') == 'true':
        if node.get('generate_idx_var') == 'OH_IDX':
            generateSize = num_of_oh
        elif node.get('generate_idx_var') == 'GBT_IDX':
            generateSize = num_of_oh * 3 if station == "1" else num_of_oh * 2
        else:
            generateSize = parseInt(node.get('generate_size'))

        generateAddressStep = parseInt(node.get('generate_address_step'))
        generateIdxVar = node.get('generate_idx_var')
        for i in range(0, generateSize):
            vars[generateIdxVar] = i
            print('generate base_addr = ' + hex(baseAddress + generateAddressStep * i) + ' for node ' + node.get('id'))
            findRegisters(node, baseName, baseAddress + generateAddressStep * i, modules, currentModule, vars, True, num_of_oh, station)
        return

    isModule = node.get('fw_is_module') is not None and node.get('fw_is_module') == 'true'
    name = baseName
    module = currentModule
    if baseName != '':
        name += '.'
    name += node.get('id')
    name = substituteVars(name, vars)
    address = baseAddress

    if isModule:
        module = Module()
        module.name = name
        module.description = substituteVars(node.get('description'), vars)
        module.baseAddress = parseInt(node.get('address'))
        if node.get('fw_is_module_external') is not None and node.get('fw_is_module_external') == 'true':
            module.isExternal = True
        else:
            module.regAddressMsb = parseInt(node.get('fw_reg_addr_msb'))
            module.regAddressLsb = parseInt(node.get('fw_reg_addr_lsb'))
            module.file = node.get('fw_module_file')
            module.userClock = node.get('fw_user_clock_signal')
            module.busClock = node.get('fw_bus_clock_signal')
            module.busReset = node.get('fw_bus_reset_signal')
            module.masterBus = node.get('fw_master_bus_signal')
            module.slaveBus = node.get('fw_slave_bus_signal')
        if not module.isValid():
            error = 'One or more parameters for module ' + module.name + ' is missing... ' + module.toString()
            raise ValueError(error)
        modules.append(module)
    else:
        if node.get('address') is not None:
            address = baseAddress + parseInt(node.get('address'))

        if node.get('address') is not None and node.get('permission') is not None: #and node.get('mask') is not None:
            reg = Register()
            reg.name = name
            reg.address = address
            reg.description = substituteVars(node.get('description'), vars)
            reg.permission = node.get('permission')
            if node.get('mask') is None:
                reg.mask = 0xffffffff; # default to full 32bit mask if not specified
            else:
                reg.mask = parseInt(node.get('mask'))
            msb, lsb = getLowHighFromBitmask(reg.mask)
            reg.msb = msb
            reg.lsb = lsb
            reg.default = parseInt(node.get('fw_default'))
            if node.get('fw_signal') is not None:
                reg.signal = substituteVars(node.get('fw_signal'), vars)
            if node.get('fw_write_pulse_signal') is not None:
                reg.write_pulse_signal = substituteVars(node.get('fw_write_pulse_signal'), vars)
            if node.get('fw_write_done_signal') is not None:
                reg.write_done_signal = substituteVars(node.get('fw_write_done_signal'), vars)
            if node.get('fw_read_pulse_signal') is not None:
                reg.read_pulse_signal = substituteVars(node.get('fw_read_pulse_signal'), vars)
            if node.get('fw_read_ready_signal') is not None:
                reg.read_ready_signal = substituteVars(node.get('fw_read_ready_signal'), vars)

            if module is None:
                error = 'Module is not set, cannot add register ' + reg.name
                raise ValueError(error)
            if not reg.isValidReg(module.isExternal):
                raise ValueError('One or more attributes for register %s are missing.. %s' % (reg.name, reg.toString()))

            module.addReg(reg)

    for child in node:
        findRegisters(child, name, address, modules, module, vars, False, num_of_oh, station)

def writeConstantsFile(modules, filename):
    f = open(filename, 'w')
    f.write('library IEEE;\n'\
            'use IEEE.STD_LOGIC_1164.all;\n\n')
    f.write('-----> !! This package is auto-generated from an address table file using <repo_root>/scripts/generate_registers.py !! <-----\n')
    f.write('package registers is\n')

    for module in modules:
        if module.isExternal:
            continue

        totalRegs32 = getNumRequiredRegs32(module)

        # check if we have enough address bits for the max reg address (recall that the reg list is sorted by address)
        topAddressBinary = "{0:#0b}".format(module.regs[-1].address)
        numAddressBitsNeeded = len(topAddressBinary) - 2
        print('Top address of the registers is ' + hex(module.regs[-1].address) + ' (' + topAddressBinary + '), need ' + str(numAddressBitsNeeded) + ' bits and have ' + str(module.regAddressMsb - module.regAddressLsb + 1) + ' bits available')
        if numAddressBitsNeeded > module.regAddressMsb - module.regAddressLsb + 1:
            raise ValueError('There is not enough bits in the module address space to accomodate all registers (see above for details). Please modify fw_reg_addr_msb and/or fw_reg_addr_lsb attributes in the xml file')


        f.write('\n')
        f.write('    --============================================================================\n')
        f.write('    --       >>> ' + module.getVhdlName() + ' Module <<<    base address: ' + hexPadded32(module.baseAddress) + '\n')
        f.write('    --\n')
        for line in tw.wrap(module.description, 75):
            f.write('    -- ' + line + '\n')
        f.write('    --============================================================================\n\n')

        f.write('    constant ' + VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_NUM_REGS : integer := ' + str(totalRegs32) + ';\n')
        f.write('    constant ' + VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_ADDRESS_MSB : integer := ' + str(module.regAddressMsb) + ';\n')
        f.write('    constant ' + VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_ADDRESS_LSB : integer := ' + str(module.regAddressLsb) + ';\n')
        #f.write('    type T_' + VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_ADDRESS_ARR is array(integer range <>) of std_logic_vector(%s downto %s);\n\n' % (VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_ADDRESS_MSB', VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_ADDRESS_LSB')) # cannot use that because we need to be able to pass it as a generic type to the generic IPBus slave module

        for reg in module.regs:
            print('Writing register constants for ' + reg.name)
            f.write('    constant ' + VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_ADDR    : '\
                        'std_logic_vector(' + str(module.regAddressMsb) + ' downto ' + str(module.regAddressLsb) + ') := ' + \
                        vhdlHexPadded(reg.address, module.regAddressMsb - module.regAddressLsb + 1)  + ';\n')
            if reg.msb == reg.lsb:
                f.write('    constant ' + VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_BIT    : '\
                            'integer := ' + str(reg.msb) + ';\n')
            else:
                f.write('    constant ' + VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_MSB    : '\
                            'integer := ' + str(reg.msb) + ';\n')
                f.write('    constant ' + VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_LSB     : '\
                            'integer := ' + str(reg.lsb) + ';\n')
            if reg.default is not None and reg.msb - reg.lsb > 0:
                f.write('    constant ' + VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_DEFAULT : '\
                            'std_logic_vector(' + str(reg.msb) + ' downto ' + str(reg.lsb) + ') := ' + \
                            vhdlHexPadded(reg.default, reg.msb - reg.lsb + 1)  + ';\n')
            elif reg.default is not None and reg.msb - reg.lsb == 0:
                f.write('    constant ' + VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_DEFAULT : '\
                            'std_logic := ' + \
                            vhdlHexPadded(reg.default, reg.msb - reg.lsb + 1)  + ';\n')
            f.write('\n')

    f.write('\n')
    f.write('end registers;\n')
    f.close()

def updateModuleFile(module):
    if module.isExternal:
        return

    totalRegs32 = getNumRequiredRegs32(module)
    print('Updating ' + module.name + ' module in file = ' + module.file)
    f = open(module.file, 'r+')
    lines = f.readlines()
    f.close()

    f = open(module.file, 'w')
    signalSectionFound = False
    signalSectionDone = False
    slaveSectionFound = False
    slaveSectionDone = False
    registersLibraryFound = False
    for line in lines:
        if line.startswith('use work.registers.all;'):
            registersLibraryFound = True

        # if we're outside of business of writing the special sections, then just repeat the lines we read from the original file
        if (not signalSectionFound or signalSectionDone) and (not slaveSectionFound or slaveSectionDone):
            f.write(line)
        elif (signalSectionFound and not signalSectionDone and VHDL_REG_SIGNAL_MARKER_END in line):
            signalSectionDone = True
            f.write(line)
        elif (slaveSectionFound and not slaveSectionDone and VHDL_REG_SLAVE_MARKER_END in line):
            slaveSectionDone = True
            f.write(line)

        # signal section
        if VHDL_REG_SIGNAL_MARKER_START in line:
            signalSectionFound = True
            signalDeclaration         = '    signal regs_read_arr        : t_std32_array(<num_regs> - 1 downto 0);\n'\
                                        '    signal regs_write_arr       : t_std32_array(<num_regs> - 1 downto 0);\n'\
                                        '    signal regs_addresses       : t_std32_array(<num_regs> - 1 downto 0);\n'\
                                        "    signal regs_defaults        : t_std32_array(<num_regs> - 1 downto 0) := (others => (others => '0'));\n"\
                                        '    signal regs_read_pulse_arr  : std_logic_vector(<num_regs> - 1 downto 0);\n'\
                                        '    signal regs_write_pulse_arr : std_logic_vector(<num_regs> - 1 downto 0);\n'\
                                        "    signal regs_read_ready_arr  : std_logic_vector(<num_regs> - 1 downto 0) := (others => '1');\n" \
                                        "    signal regs_write_done_arr  : std_logic_vector(<num_regs> - 1 downto 0) := (others => '1');\n" \
                                        "    signal regs_writable_arr    : std_logic_vector(<num_regs> - 1 downto 0) := (others => '0');\n"
            signalDeclaration = signalDeclaration.replace('<num_regs>', VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_NUM_REGS')
            f.write(signalDeclaration)

        # slave section
        if VHDL_REG_SLAVE_MARKER_START in line:
            slaveSectionFound = True
            slaveDeclaration =  '    ipbus_slave_inst : entity work.ipbus_slave\n'\
                                '        generic map(\n'\
                                '           g_NUM_REGS             => %s,\n' % (VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_NUM_REGS') + \
                                '           g_ADDR_HIGH_BIT        => %s,\n' % (VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_ADDRESS_MSB') + \
                                '           g_ADDR_LOW_BIT         => %s,\n' % (VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_ADDRESS_LSB') + \
                                '           g_USE_INDIVIDUAL_ADDRS => true\n'\
                                '       )\n'\
                                '       port map(\n'\
                                '           ipb_reset_i            => %s,\n' % (module.busReset) + \
                                '           ipb_clk_i              => %s,\n' % (module.busClock) + \
                                '           ipb_mosi_i             => %s,\n' % (module.masterBus) + \
                                '           ipb_miso_o             => %s,\n' % (module.slaveBus) + \
                                '           usr_clk_i              => %s,\n' % (module.userClock) + \
                                '           regs_read_arr_i        => regs_read_arr,\n'\
                                '           regs_write_arr_o       => regs_write_arr,\n'\
                                '           read_pulse_arr_o       => regs_read_pulse_arr,\n'\
                                '           write_pulse_arr_o      => regs_write_pulse_arr,\n'\
                                '           regs_read_ready_arr_i  => regs_read_ready_arr,\n'\
                                '           regs_write_done_arr_i  => regs_write_done_arr,\n'\
                                '           individual_addrs_arr_i => regs_addresses,\n'\
                                '           regs_defaults_arr_i    => regs_defaults,\n'\
                                '           writable_regs_i        => regs_writable_arr\n'\
                                '      );\n'

            f.write('\n')
            f.write('    -- IPbus slave instanciation\n')
            f.write(slaveDeclaration)
            f.write('\n')

            # assign addresses
            uniqueAddresses = []
            for reg in module.regs:
                if not reg.address in uniqueAddresses:
                    uniqueAddresses.append(reg.address)
            if len(uniqueAddresses) != totalRegs32:
                raise ValueError("Something's worng.. Got a list of unique addresses which is of different length than the total number of 32bit addresses previously calculated..");

            f.write('    -- Addresses\n')
            for i in range(0, totalRegs32):
                f.write('    regs_addresses(%d)(%s downto %s) <= %s;\n' % (i, VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_ADDRESS_MSB', VHDL_REG_CONSTANT_PREFIX + module.getVhdlName() + '_ADDRESS_LSB', vhdlHexPadded(uniqueAddresses[i], module.regAddressMsb - module.regAddressLsb + 1))) # TODO: this is a hack using literal values - you should sort it out in the future and use constants (the thing is that the register address constants are not good for this since there are more of them than there are 32bit registers, so you need a constant for each group of regs that go to the same 32bit reg)
            f.write('\n')

            # connect read signals
            f.write('    -- Connect read signals\n')
            for reg in module.regs:
                isSingleBit = reg.msb == reg.lsb
                if 'r' in reg.permission:
                    f.write('    regs_read_arr(%d)(%s) <= %s;\n' % (uniqueAddresses.index(reg.address), VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_BIT' if isSingleBit else VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_MSB' + ' downto ' + VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_LSB', reg.signal))

            f.write('\n')

            # connect write signals
            f.write('    -- Connect write signals\n')
            for reg in module.regs:
                isSingleBit = reg.msb == reg.lsb
                if 'w' in reg.permission and reg.signal is not None:
                    f.write('    %s <= regs_write_arr(%d)(%s);\n' % (reg.signal, uniqueAddresses.index(reg.address), VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_BIT' if isSingleBit else VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_MSB' + ' downto ' + VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_LSB'))
            f.write('\n')

            # connect write pulse signals
            writePulseAddresses = []
            duplicateWritePulseError = False
            f.write('    -- Connect write pulse signals\n')
            for reg in module.regs:
                if 'w' in reg.permission and reg.write_pulse_signal is not None:
                    if uniqueAddresses.index(reg.address) in writePulseAddresses:
                        duplicateWritePulseError = True
                        f.write(" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n")
                        f.write(" !!! ERROR: register #" + str(uniqueAddresses.index(reg.address)) + " in module " + module.name + " is used for multiple write pulses (there can only be one write pulse per register address)\n")
                        f.write(" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n")
                    writePulseAddresses.append(uniqueAddresses.index(reg.address))
                    f.write('    %s <= regs_write_pulse_arr(%d);\n' % (reg.write_pulse_signal, uniqueAddresses.index(reg.address)))
            f.write('\n')

            # connect write done signals
            writeDoneAddresses = []
            duplicateWriteDoneError = False
            f.write('    -- Connect write done signals\n')
            for reg in module.regs:
                if 'w' in reg.permission and reg.write_done_signal is not None:
                    if uniqueAddresses.index(reg.address) in writeDoneAddresses:
                        duplicateWriteDoneError = True
                        f.write(" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n")
                        f.write(" !!! ERROR: register #" + str(uniqueAddresses.index(reg.address)) + " in module " + module.name + " is used for multiple write done signals (there can only be one write done signal per register address)\n")
                        f.write(" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n")
                    writeDoneAddresses.append(uniqueAddresses.index(reg.address))
                    f.write('    regs_write_done_arr(%d) <= %s;\n' % (uniqueAddresses.index(reg.address), reg.write_done_signal))
            f.write('\n')

            # connect read pulse signals
            readPulseAddresses = []
            duplicateReadPulseError = False
            f.write('    -- Connect read pulse signals\n')
            for reg in module.regs:
                if 'r' in reg.permission and reg.read_pulse_signal is not None:
                    if uniqueAddresses.index(reg.address) in readPulseAddresses:
                        duplicateReadPulseError = True
                        f.write(" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n")
                        f.write(" !!! ERROR: register #" + str(uniqueAddresses.index(reg.address)) + " in module " + module.name + " is used for multiple read pulses (there can only be one read pulse per register address)\n")
                        f.write(" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n")
                    readPulseAddresses.append(uniqueAddresses.index(reg.address))
                    f.write('    %s <= regs_read_pulse_arr(%d);\n' % (reg.read_pulse_signal, uniqueAddresses.index(reg.address)))
            f.write('\n')

            # connect read ready signals
            readReadyAddresses = []
            duplicateReadReadyError = False
            f.write('    -- Connect read ready signals\n')
            for reg in module.regs:
                if 'r' in reg.permission and reg.read_ready_signal is not None:
                    if uniqueAddresses.index(reg.address) in readReadyAddresses:
                        duplicateReadReadyError = True
                        f.write(" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n")
                        f.write(" !!! ERROR: register #" + str(uniqueAddresses.index(reg.address)) + " in module " + module.name + " is used for multiple read ready signals (there can only be one read ready signal per register address)\n")
                        f.write(" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \n")
                    readReadyAddresses.append(uniqueAddresses.index(reg.address))
                    f.write('    regs_read_ready_arr(%d) <= %s;\n' % (uniqueAddresses.index(reg.address), reg.read_ready_signal))
            f.write('\n')

            # Defaults
            f.write('    -- Defaults\n')
            writableRegAddresses = []
            for reg in module.regs:
                isSingleBit = reg.msb == reg.lsb
                if reg.default is not None:
                    if not uniqueAddresses.index(reg.address) in writableRegAddresses:
                        writableRegAddresses.append(uniqueAddresses.index(reg.address))
                    f.write('    regs_defaults(%d)(%s) <= %s;\n' % (uniqueAddresses.index(reg.address), VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_BIT' if isSingleBit else VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_MSB' + ' downto ' + VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_LSB', VHDL_REG_CONSTANT_PREFIX + reg.getVhdlName() + '_DEFAULT'))
            f.write('\n')

            # Writable regs
            # connect read ready signals
            f.write('    -- Define writable regs\n')
            for regAddr in writableRegAddresses:
                    f.write("    regs_writable_arr(%d) <= '1';\n" % (regAddr))
            f.write('\n')

    f.close()

    if not signalSectionFound or not signalSectionDone:
        print('--> ERROR <-- Could not find a signal section in the file.. Please include "' + VHDL_REG_SIGNAL_MARKER_START + '" and "' + VHDL_REG_SIGNAL_MARKER_END + '" comments denoting the area where the generated code will be inserted')
        print('        e.g. someting like that would work and look nice:')
        print('        ' + VHDL_REG_SIGNAL_MARKER_START + ' ' + VHDL_REG_GENERATED_DISCLAIMER)
        print('        ' + VHDL_REG_SIGNAL_MARKER_END + ' ----------------------------------------------')
        raise ValueError('No signal declaration markers found in %s -- see above' % module.file)

    if not slaveSectionFound or not slaveSectionDone:
        print('--> ERROR <-- Could not find a slave section in the file.. Please include "' + VHDL_REG_SLAVE_MARKER_START + '" and "' + VHDL_REG_SLAVE_MARKER_END + '" comments denoting the area where the generated code will be inserted')
        print('        e.g. someting like that would work and look nice:')
        print('        --===============================================================================================')
        print('        -- ' + VHDL_REG_GENERATED_DISCLAIMER)
        print('        ' + VHDL_REG_SLAVE_MARKER_START + ' ' + '==========================================================================')
        print('        ' + VHDL_REG_SLAVE_MARKER_END + ' ============================================================================')
        raise ValueError('No slave markers found in %s -- see above' % module.file)

    if not registersLibraryFound:
        raise ValueError('Registers library not included in %s -- please add "use work.registers.all;"' % module.file)

    if duplicateWritePulseError:
        raise ValueError("Two or more write pulse signals in module %s are associated with the same register address (only one write pulse per reg address is allowed), more details are printed to the module file" % module.file)
    if duplicateWriteDoneError:
        raise ValueError("Two or more write done signals in module %s are associated with the same register address (only one write done signal per reg address is allowed), more details are printed to the module file" % module.file)
    if duplicateReadPulseError:
        raise ValueError("Two or more read pulse signals in module %s are associated with the same register address (only one read pulse per reg address is allowed), more details are printed to the module file" % module.file)
    if duplicateReadReadyError:
        raise ValueError("Two or more read ready signals in module %s are associated with the same register address (only one read ready signal per reg address is allowed), more details are printed to the module file" % module.file)

# prints out bash scripts for quick and dirty testing in CTP7 linux (TODO: compile and install python there and write a nice command line interface which would use the address table (something like acm13tool with reg names autocomplete would be cool)
def writeStatusBashScript(modules, filename):
    print('Writing CTP7 status bash script')

    f = open(filename, 'w')

    f.write('#!/bin/sh\n\n')
    f.write('MODULE=$1\n')

    f.write('if [ -z "$MODULE" ]; then\n')
    f.write('    echo "Usage: this_script.sh <module_name>"\n')
    f.write('    echo "Available modules:"\n')
    for module in modules:
        f.write('    echo "%s"' % module.name.replace(TOP_NODE_NAME + '.', ''))
    f.write('    exit\n')
    f.write('fi\n\n')

    for module in modules:
        f.write('if [ "$MODULE" = "%s" ]; then\n' % module.name.replace(TOP_NODE_NAME + '.', ''))
        for reg in module.regs:
            if 'r' in reg.permission:
                if reg.mask == 0xffffffff:
                    f.write("    printf '" + reg.name.ljust(45) + " = 0x%x\\n' `mpeek " + hex(AXI_IPB_BASE_ADDRESS + ((module.baseAddress + reg.address) << 2)) + "` \n")
                else:
                    f.write("    printf '" + reg.name.ljust(45) + " = 0x%x\\n' $(( (`mpeek " + hex(AXI_IPB_BASE_ADDRESS + ((module.baseAddress + reg.address) << 2)) + "` & " + hexPadded32(reg.mask) + ") >> " + str(reg.lsb) + " ))\n")
        f.write('fi\n\n')

    f.close()

def writeUHalAddressTable(modules, filename, addrOffset, num_of_oh = None):
    print('Writing uHAL address table XML')

    rw_reg.parseXML(ADDRESS_TABLE_TOP, num_of_oh)
    top = rw_reg.getNode('GEM_AMC')
    print(top)

    # AMC specific nodes
    f = open("%s_amc.xml"%(filename), 'w')
    f.write('<?xml version="1.0" encoding="ISO-8859-1"?>\n')
    f.write('<node id="top">\n')
    printNodeToUHALFile(top, f, 1, 0, None, addrOffset)
    f.write('</node>\n')
    f.close()

    # OH specific nodes
    for oh in range(num_of_oh):
        f = open("%s_link%02d.xml"%(filename,oh), 'w')
        f.write('<?xml version="1.0" encoding="ISO-8859-1"?>\n')
        f.write('<node id="top">\n')
        printNodeToUHALFile(top, f, 1, 0, None, addrOffset, oh)
        f.write('</node>\n')
        f.close()
        pass
    pass

def printNodeToUHALFile(node, file, level, baseAddress, baseName, addrOffset, num_of_oh=None):
    amcTopNodesToSkip = ["GEM_AMC.OH"]

    ohTopNodesToSkip = [
        "GEM_AMC.TTC",
        "GEM_AMC.TRIGGER.CTRL",
        "GEM_AMC.TRIGGER.STATUS",
        "GEM_AMC.GEM_SYSTEM",
        "GEM_AMC.GEM_TESTS",
        "GEM_AMC.DAQ",
        "GEM_AMC.OH_LINKS.CTRL",
        "GEM_AMC.SLOW_CONTROL",
        "GEM_AMC.GLIB_SYSTEM",
        ]

    name = node.name
    if baseName is not None:
        name = name.replace(baseName + ".", "")

    if (num_of_oh == None and "%s.%s"%(baseName,name) in amcTopNodesToSkip):
        # only for writing the AMC specific file
        print 'Not writing node "%s" to AMC uHAL address table file'%(name)
        return

    if num_of_oh in range(0,12):
        # only for writing the OH specific file
        if "%s.%s"%(baseName,name) in ohTopNodesToSkip:
            print 'Not writing node "%s" to OH uHAL address table file'%(name)
            return
        if name in ["OH%d"%(oh) for oh in range(0,12) if oh != num_of_oh]:
            print 'Not writing node "%s" to OH%d uHAL address table file'%(name,num_of_oh)
            return
    for i in range(level):
        file.write('  ')
        pass

    file.write('<node id="%s" ' % name)
    if node.address is not None:
        if baseName is None and level == 1:
            file.write('address="%s" ' % hex((node.address - baseAddress) + addrOffset))
        else:
            file.write('address="%s" ' % hex(node.address - baseAddress))
    if node.permission is not None:
        file.write('permission="%s" ' % node.permission)
    if node.mask is not None:
        file.write('mask="%s" ' % hex(node.mask))
    if node.mode is not None:
        file.write('mode="%s" ' % node.mode)
    if node.size is not None:
        file.write('size="%s" ' % node.size)

    if len(node.children) > 0:
        file.write('>\n')
        for child in node.children:
            printNodeToUHALFile(child, file, level + 1, node.address, node.name, addrOffset, num_of_oh)
        for i in range(level):
            file.write('  ')
        file.write('</node>\n')
    else:
        file.write('/>\n')

# prints out bash script to read registers matching an expression
def writeRegReadBashScript(modules, filename):
    print('Writing CTP7 reg read bash script')

    f = open(filename, 'w')

    f.write('#!/bin/sh\n\n')
    f.write('REQUEST=$1\n\n')
    f.write('set -- ')

    for module in modules:
        for reg in module.regs:
            if 'r' in reg.permission:
                if reg.mask == 0xffffffff:
                    f.write('\\\n    "' + reg.name + ":`mpeek " + hex(AXI_IPB_BASE_ADDRESS + ((module.baseAddress + reg.address) << 2)) + "`\"")
#                    f.write('\\\n    "' + reg.name + ":`echo " + hex(AXI_IPB_BASE_ADDRESS + ((module.baseAddress + reg.address) << 2)) + "`\"")
                else:
                    f.write('\\\n    "' + reg.name + ":$(( (`mpeek " + hex(AXI_IPB_BASE_ADDRESS + ((module.baseAddress + reg.address) << 2)) + "` & " + hexPadded32(reg.mask) + ") >> " + str(reg.lsb) + " ))\"")
#                    f.write('\\\n    "' + reg.name + ":`echo " + hex(AXI_IPB_BASE_ADDRESS + ((module.baseAddress + reg.address) << 2)) + "`\"")

    f.write('\n\n')
    f.write('for reg; do\n')
    f.write('  KEY=${reg%%:*}\n')
    f.write('  case $KEY in\n')
    f.write("     *$REQUEST*) printf '%s            = 0x%x\\n' $KEY ${reg#*:};;\n")
    f.write('  esac\n')
    f.write('done\n')
    f.close()

# returns the number of required 32 bit registers for this module -- basically it counts the number of registers with different addresses
def getNumRequiredRegs32(module):
    totalRegs32 = 0
    if len(module.regs) > 0:
        totalRegs32 = 1
        lastAddress = module.regs[0].address
        for reg in module.regs:
            if reg.address != lastAddress:
                totalRegs32 += 1
                lastAddress = reg.address
    return totalRegs32

def hex(number):
    if number is None:
        return 'None'
    else:
        return "{0:#0x}".format(number)

def hexPadded32(number):
    if number is None:
        return 'None'
    else:
        return "{0:#0{1}x}".format(number, 10)

def binaryPadded32(number):
    if number is None:
        return 'None'
    else:
        return "{0:#0{1}b}".format(number, 34)

def vhdlHexPadded(number, numBits):
    if number is None:
        return 'None'
    else:
        hex32 = hexPadded32(number)
        binary32 = binaryPadded32(number)

        ret = ''

        # if the number is not aligned with hex nibbles, add  some binary in front
        numSingleBits = (numBits % 4)
        if (numSingleBits != 0):
            ret += "'" if numSingleBits == 1 else '"'
            # go back from the MSB down to the boundary of the most significant nibble
            for i in range(numBits, numBits // 4 * 4, -1):
                ret += binary32[i *  -1]
            ret += "'" if numSingleBits == 1 else '"'


        # add the right amount of hex characters

        if numBits // 4 > 0:
            if (numSingleBits != 0):
                ret += ' & '
            ret += 'x"'
            for i in range(numBits // 4, 0, -1):
                ret += hex32[i * -1]
            ret += '"'
        return ret


def parseInt(string):
    if string is None:
        return None
    elif string.startswith('0x'):
        return int(string, 16)
    elif string.startswith('0b'):
        return int(string, 2)
    else:
        return int(string)

def getLowHighFromBitmask(bitmask):
    binary32 = binaryPadded32(bitmask)
    lsb = -1
    msb = -1
    rangeDone = False
    for i in range(1, 33):
        if binary32[i * -1] == '1':
            if rangeDone == True:
                raise ValueError('Non-continuous bitmasks are not supported: %s' % hexPadded32(bitmask))
            if lsb == -1:
                lsb = i - 1
            msb = i - 1
        if lsb != -1 and binary32[i * -1] == '0':
            if rangeDone == False:
                rangeDone = True
    return msb, lsb

def substituteVars(string, vars):
    if string is None:
        return string
    ret = string
    for varKey in vars.keys():
        ret = ret.replace('${' + varKey + '}', str(vars[varKey]))
    return ret

if __name__ == '__main__':
    main()
